#!/usr/bin/env python3
"""
Simple Voice Demo - Test NeuTTS Air voice responses
"""

import argparse
import time
import soundfile as sf
from pathlib import Path
import sys

# Add the parent directory to the path so we can import neuttsair
sys.path.append(str(Path(__file__).parent.parent))

from neuttsair.neutts import NeuTTSAir


def main():
    parser = argparse.ArgumentParser(description="Simple Voice Demo with NeuTTS Air")
    parser.add_argument("--ref_audio", default="samples/dave.wav", 
                       help="Reference audio file for voice cloning")
    parser.add_argument("--ref_text", default="samples/dave.txt", 
                       help="Reference text file for voice cloning")
    parser.add_argument("--backbone", default="neuphonic/neutts-air-q4-gguf",
                       help="Backbone model to use")
    
    args = parser.parse_args()
    
    # Check if files exist
    if not Path(args.ref_audio).exists():
        print(f"‚ùå Reference audio file not found: {args.ref_audio}")
        return
    
    if not Path(args.ref_text).exists():
        print(f"‚ùå Reference text file not found: {args.ref_text}")
        return
    
    try:
        # Initialize TTS
        print("Loading NeuTTS Air...")
        tts = NeuTTSAir(
            backbone_repo=args.backbone,
            backbone_device="cpu",
            codec_repo="neuphonic/neucodec",
            codec_device="cpu"
        )
        
        # Load reference text
        with open(args.ref_text, 'r') as f:
            ref_text = f.read().strip()
        
        # Pre-encode reference for faster inference
        print("Encoding reference audio...")
        ref_codes = tts.encode_reference(args.ref_audio)
        print("Ready for voice generation!")
        
        # Demo conversation
        responses = [
            "Hello! I'm an AI assistant powered by NeuTTS Air. It's great to meet you!",
            "How are you doing today? I hope you're having a wonderful day.",
            "This is a demonstration of real-time text-to-speech using voice cloning technology.",
            "The voice you're hearing is generated by cloning the reference speaker's voice.",
            "Thank you for trying out this voice chat demo. Have a great day!"
        ]
        
        print("\n" + "="*60)
        print("üéôÔ∏è  NEUTTS AIR VOICE DEMO")
        print("="*60)
        
        for i, response_text in enumerate(responses, 1):
            print(f"\n{i}. Generating: {response_text}")
            print("üéµ Synthesizing speech...")
            
            # Generate speech
            wav = tts.infer(response_text, ref_codes, ref_text)
            
            # Save and play audio
            output_path = f"demo_response_{i}.wav"
            sf.write(output_path, wav, 24000)
            
            # Play audio (macOS)
            import subprocess
            subprocess.run(["afplay", output_path], check=True)
            
            # Clean up
            import os
            os.remove(output_path)
            
            # Wait a moment between responses
            if i < len(responses):
                time.sleep(1)
        
        print("\n‚úÖ Demo completed! All audio files have been played.")
        
    except KeyboardInterrupt:
        print("\n\nüëã Demo ended by user.")
    except Exception as e:
        print(f"‚ùå Error: {e}")


if __name__ == "__main__":
    main()
